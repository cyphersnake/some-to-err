name: Rust

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --all --verbose

    - name: Clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all-targets --all-features -- -D warnings

    - name: Tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --doc --all --verbose

  coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly

    - name: Coverage
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all-features --no-fail-fast
      env:
        CARGO_INCREMENTAL: '0'
        RUSTFLAGS: |
          -Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code
          -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests -Cinstrument-coverage
        RUSTDOCFLAGS: |
          -Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code
          -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests -Cinstrument-coverage'

    - name: Gather coverage data
      id: coverage
      uses: actions-rs/grcov@v0.1

    - name: Report coverage in PR status for the current commit
      if: github.ref_name != 'master'
      run: |
        set -eu
        total=$(cat ${COV_REPORT_DIR}/badges/flat.svg | egrep '<title>coverage: ' | cut -d: -f 2 | cut -d% -f 1 | sed 's/ //g')
        curl -s "https://brouberol:${GITHUB_TOKEN}@api.github.com/repos/cyphersnake/some-to-err/statuses/${COMMIT_SHA}" -d "{\"state\": \"success\",\"target_url\": \"https://github.com/cyphersnake/some-to-err/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"${total}%\",\"context\": \"Measured coverage\"}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        RUN_ID: ${{ github.run_id }}
        PULL_NUMBER: ${{ github.event.pull_request.number }}
        COV_REPORT_DIR: ${{ steps.coverage.outputs.report }}
